/**
 * Copyright 2016 Flipkart Internet Pvt. Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.flipkart.storm.mysql;

import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.ArrayList;
import java.util.List;

/**
 * The complete event as generated by the spout.
 *
 * @NotThreadSafe
 */
public final class TransactionEvent {

    private TransactionState  txState;
    private String            databaseName;
    private int               serverId;
    private int               binLogPosition;
    private String            binLogFileName;
    private Long              txId;
    private List<DataEvent>   dataEvents;
    private long              startTimeInNanos;
    private long              endTimeInNanos;

    /**
     * The Builder class for creating the transaction event.
     */
    public static class Builder {

        private String              innerDataBaseName           = "";
        private int                 innerServerId               = -1;
        private int                 innerBinLogPos              = -1;
        private String              innerBinLogFileName         = "";
        private Long                innerTxId                   = null;
        private long                innerStartTimeInNanos       = 0L;
        private long                innerEndTimeInNanos         = 0L;
        private TransactionState    innerTxState                = TransactionState.NONE;
        private List<DataEvent>     innerDataEventList          = new ArrayList<DataEvent>();

        /**
         * Set the database name.
         *
         * @param database the database name
         * @return the builder object to continue building
         */
        public Builder database(String database) {
            this.innerDataBaseName = database;
            return this;
        }

        /**
         * The serverId as mentioned in the Bin Log Event.
         *
         * @param serverId the mysql server id
         * @return the builder object to continue building
         */
        public Builder serverId(int serverId) {
            this.innerServerId = serverId;
            return this;
        }

        /**
         * The bin log position in the bin log event.
         *
         * @param pos the position
         * @return the builder object to continue building
         */
        public Builder binLogPosition(int pos) {
            this.innerBinLogPos = pos;
            return this;
        }

        /**
         * The bin log file name for the event.
         *
         * @param fileName the binlog file name
         * @return the builder object to continue building
         */
        public Builder binLogFileName(String fileName) {
            this.innerBinLogFileName = fileName;
            return this;
        }

        /**
         * Adding the data event to the transaction.
         * There can be multiple bin log dml events per transation.
         *
         * @param dataEvent the bin log data event
         * @return the builder object to continue building
         */
        public Builder addDataEvent(DataEvent dataEvent) {
            this.innerDataEventList.add(dataEvent);
            return this;
        }

        /**
         * The transaction as received in the Xid Bin Log Event.
         * This may not be there for MyISAM tables.
         *
         * @param txId the transaction id
         * @return the builder object to continue building
         */
        public Builder txId(Long txId) {
            this.innerTxId = txId;
            return this;
        }

        /**
         * The state of the transaction. If we receive a XidEvent it has
         * to be in a STARTED state. All transaction events been built have to
         * be in END state.
         *
         * @param state the transaction state
         * @return the builder object to continue building
         */
        public Builder txState(TransactionState state) {
            this.innerTxState = state;
            return this;
        }

        /**
         * The transaction start time. When the binlog event was generated
         * by open replicator.
         *
         * @param time the time at which the event was received.
         * @return the builder object to continue building
         */
        public Builder txTimeStart(long time) {
            this.innerStartTimeInNanos = time;
            return this;
        }

        /**
         * The transaction end time, should be the XidEvent time.
         *
         * @param time the tx end time
         * @return the builder object to continue building
         */
        public Builder txTimeEnd(long time) {
            this.innerEndTimeInNanos = time;
            return this;
        }

        /**
         * Get the transaction inner tx state.
         *
         * @return the transaction state
         */
        public TransactionState getInnerTxState() {
            return this.innerTxState;
        }

        /**
         * Get All Inner Data Events.
         *
         * @return the data event list
         */
        public List<DataEvent> getInnerDataEvents() {
            return this.innerDataEventList;
        }

        /**
         * Get the Server Id the txEvent is being built with.
         *
         * @return the server id
         */
        public int getInnerServerId() {
            return this.innerServerId;
        }

        /**
         * Reset the builder completely.
         *
         * @return the builder object to continue building
         */
        public Builder reset() {
            this.innerDataBaseName           = "";
            this.innerServerId               = -1;
            this.innerBinLogPos              = -1;
            this.innerBinLogFileName         = "";
            this.innerTxId                   = null;
            this.innerStartTimeInNanos       = 0L;
            this.innerEndTimeInNanos         = 0L;
            this.innerTxState                = TransactionState.NONE;
            this.innerDataEventList = new ArrayList<DataEvent>();
            return this;
        }

        /**
         * Build the complete object with properties that were set.
         * @return the transaction event.
         */
        public TransactionEvent build() {
            TransactionEvent txEvent =  new TransactionEvent(this);
            return txEvent;
        }

    }

    private TransactionEvent(Builder builder) {
        this.databaseName           = builder.innerDataBaseName;
        this.serverId               = builder.innerServerId;
        this.binLogPosition         = builder.innerBinLogPos;
        this.binLogFileName         = builder.innerBinLogFileName;
        this.txId                   = builder.innerTxId;
        this.txState                = builder.innerTxState;
        this.dataEvents             = builder.innerDataEventList;
        this.startTimeInNanos       = builder.innerStartTimeInNanos;
        this.endTimeInNanos         = builder.innerEndTimeInNanos;
    }

    /**
     * For ObjectMapper to instantiate object.
     */
    @Deprecated
    TransactionEvent() {
    }

    public String getDatabaseName() {
        return databaseName;
    }

    public int getServerId() {
        return serverId;
    }

    public List<DataEvent> getDataEvents() {
        return dataEvents;
    }

    @JsonIgnore
    public int getBinLogPosition() {
        return binLogPosition;
    }

    @JsonIgnore
    public String getBinLogFileName() {
        return binLogFileName;
    }

    @JsonIgnore
    public Long getTransactionId() {
        return txId;
    }

    @JsonIgnore
    public TransactionState getTransactionState() {
        return txState;
    }

    @JsonIgnore
    public long getStartTimeInNanos() {
        return startTimeInNanos;
    }

    @JsonIgnore
    public long getEndTimeInNanos() {
        return endTimeInNanos;
    }

    @Override
    public String toString() {
        return "TransactionEvent{" +
                "txState=" + txState +
                ", databaseName='" + databaseName + '\'' +
                ", serverId=" + serverId +
                ", binLogPosition=" + binLogPosition +
                ", binLogFileName='" + binLogFileName + '\'' +
                ", txId=" + txId +
                ", dataEvents=" + dataEvents +
                '}';
    }
}
